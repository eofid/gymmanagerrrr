package com.gym.management.gymmanager.controller;

import com.gym.management.gymmanager.cache.PersonCache;
import com.gym.management.gymmanager.model.Person;
import com.gym.management.gymmanager.service.PersonService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/persons")
public class PersonController {

    @Autowired
    private PersonService personService;

    @Autowired
    private PersonCache personCache;

    // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    @PostMapping
    public ResponseEntity<Person> addPerson(@RequestBody Person person) {
        Person savedPerson = personService.savePerson(person);
        return ResponseEntity.ok(savedPerson);
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    @GetMapping("/{id}")
    public ResponseEntity<Person> getPersonById(@PathVariable Long id) {
        Person person = personService.getPersonById(id);
        if (person == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(person);
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ª—é–¥–µ–π
    @GetMapping
    public ResponseEntity<List<Person>> getAllPeople() {
        return ResponseEntity.ok(personService.getAllPeople());
    }

    // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ ID
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePerson(@PathVariable Long id) {
        boolean deleted = personService.deletePerson(id);
        if (deleted) {
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }

    // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–ª–æ–≤–µ–∫–∞
    @PutMapping("/{id}")
    public ResponseEntity<Person> updatePerson(@PathVariable Long id, @RequestBody Person personDetails) {
        Person updatedPerson = personService.updatePerson(id, personDetails);
        if (updatedPerson != null) {
            return ResponseEntity.ok(updatedPerson);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // üîó –ü—Ä–∏–≤—è–∑–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–µ–ª–æ–≤–µ–∫—É
    @PutMapping("/{personId}/trainer/{trainerId}")
    public ResponseEntity<Person> assignTrainer(@PathVariable Long personId, @PathVariable Long trainerId) {
        Person updated = personService.assignTrainerToPerson(personId, trainerId);
        if (updated != null) {
            return ResponseEntity.ok(updated);
        }
        return ResponseEntity.notFound().build();
    }

    // üîó –ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–ª–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–µ–ª–æ–≤–µ–∫—É
    @PutMapping("/{personId}/gym/{gymId}")
    public ResponseEntity<Person> assignGym(@PathVariable Long personId, @PathVariable Long gymId) {
        Person updated = personService.assignGymToPerson(personId, gymId);
        if (updated != null) {
            return ResponseEntity.ok(updated);
        }
        return ResponseEntity.notFound().build();
    }

    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—é–¥–µ–π –ø–æ —Ç–∏–ø—É –∑–∞–ª–∞ —á–µ—Ä–µ–∑ JPQL –∑–∞–ø—Ä–æ—Å
    @GetMapping("/by-gym-type")
    public ResponseEntity<List<Person>> getPeopleByGymType(@RequestParam String gymType) {
        List<Person> people = personService.getPersonsByGymType(gymType);
        return ResponseEntity.ok(people);
    }

    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—é–¥–µ–π –ø–æ —Ç–∏–ø—É –∑–∞–ª–∞ —á–µ—Ä–µ–∑ native SQL –∑–∞–ø—Ä–æ—Å
    @GetMapping("/by-gym-type-native")
    public ResponseEntity<List<Person>> getPeopleByGymTypeNative(@RequestParam String gymType) {
        List<Person> people = personService.getPersonsByGymTypeNative(gymType);
        return ResponseEntity.ok(people);
    }

    // üß† –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫—ç—à–∞
    @GetMapping("/cache")
    public ResponseEntity<Map<Long, Person>> getPersonCache() {
        return ResponseEntity.ok(personCache.getAll());
    }

    // üîÑ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤—Ä—É—á–Ω—É—é (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    @DeleteMapping("/cache/clear")
    public ResponseEntity<String> clearCache() {
        personCache.clear();
        return ResponseEntity.ok("Person cache cleared");
    }
}
